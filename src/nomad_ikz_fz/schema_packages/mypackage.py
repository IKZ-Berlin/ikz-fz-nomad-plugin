from typing import TYPE_CHECKING

if TYPE_CHECKING:
    from nomad.datamodel.datamodel import (
        EntryArchive,
    )
    from structlog.stdlib import (
        BoundLogger,
    )
import numpy as np
import pandas as pd
import plotly.graph_objects as go
from nomad.config import config
from nomad.datamodel.data import ArchiveSection, EntryData, EntryDataCategory, Schema
from nomad.datamodel.metainfo.annotations import (
    ELNAnnotation,
    ELNComponentEnum,
    SectionProperties,
)
from nomad.datamodel.metainfo.basesections import (
    CompositeSystem,
    CompositeSystemReference,
    Instrument,
    InstrumentReference,
    Process,
    ProcessStep,
)
from nomad.datamodel.metainfo.plot import PlotlyFigure, PlotSection
from nomad.metainfo import Datetime, MEnum, Quantity, SchemaPackage, Section, SubSection
from nomad.metainfo.metainfo import Category, Reference, SectionProxy
from structlog.stdlib import BoundLogger

configuration = config.get_plugin_entry_point('nomad_ikz_fz.schema_packages:mypackage')

m_package = SchemaPackage()


class Resistivity(ArchiveSection):
    m_def = Section(a_eln=dict(overview=True))
    resistivity = Quantity(
        type=np.float64,
        description=(
            'resistivity of crystal, when a range is given, fill out the minimum and '
            'maximum resistivity'
        ),
        a_eln={'component': 'NumberEditQuantity', 'defaultDisplayUnit': 'kohm cm'},
        unit='kohm cm',
    )
    resistivity_minimum = Quantity(
        type=np.float64,
        description=(
            'minimum resistivity of crystal, only fill out when a range is given'
        ),
        a_eln={'component': 'NumberEditQuantity', 'defaultDisplayUnit': 'kohm cm'},
        unit='kohm cm',
    )
    resistivity_maximum = Quantity(
        type=np.float64,
        description=(
            'maximum resistivity of crystal, only fill out when a range is given'
        ),
        a_eln={'component': 'NumberEditQuantity', 'defaultDisplayUnit': 'kohm cm'},
        unit='kohm cm',
    )

    def normalize(self, archive: 'EntryArchive', logger: 'BoundLogger') -> None:
        """
        The normalizer for the `Resistivity` class.

        Args:
            archive (EntryArchive): The archive containing the section that is being
            normalized.
            logger (BoundLogger): A structlog logger.
        """
        super().normalize(archive, logger)
        if (
            self.resistivity_minimum is not None
            and self.resistivity_maximum is not None
        ):
            self.resistivity = (self.resistivity_minimum + self.resistivity_maximum) / 2


class IKZFZCategory(EntryDataCategory):
    m_def = Category(label='IKZ Fz', categories=[EntryDataCategory])

class FzInstrument(Instrument, ArchiveSection):
    m_def = Section()

    def normalize(self, archive: 'EntryArchive', logger: 'BoundLogger') -> None:
        """
        The normalizer for the `FzInstrument` class.

        Args:
            archive (EntryArchive): The archive containing the section that is being
            normalized.
            logger (BoundLogger): A structlog logger.
        """
        super().normalize(archive, logger)

class FzInstrumentPart(Instrument, EntryData, ArchiveSection):
    """
    Class autogenerated from yaml schema.
    """

    m_def = Section()

    category = Quantity(
        type=MEnum(
            [
                'Rod holder',
                'Others',
                'Replacement parts',
                'Seed holder',
                'Coil',
                'Pre-heater',
                'Reflector',
            ]
        ),
        description='Category of the instrument part',
        a_eln={'component': 'EnumEditQuantity'},
    )
    instrument_type = Quantity(
        type=str,
        description='Type of the instrument part',
        a_eln={'component': 'StringEditQuantity'},
    )
    # Comment
    # ID
    photo = Quantity(
        type=str,
        description='Foto of the instrument part',
        a_browser={'adaptor': 'RawFileAdaptor'},
        a_eln={'component': 'FileEditQuantity'},
    )
    specification = Quantity(
        type=str,
        description='additional specification of the instrument part',
        a_eln={'component': 'StringEditQuantity'},
    )

    cabinet = Quantity(
        type=str, #MEnum(['neben FZ 1505-2', 'neben FZ 1520', ]),
        description='Location of the instrument part',
        a_eln={'component': 'EnumEditQuantity',
               'props': {
                   'suggestions': ['neben FZ 1505-2', 'neben FZ 1520', ],
               },
               },
    )
    shelf = Quantity(
        type=str, #MEnum(['1', '2', '3', '4', '5', '6', '7', '8', '9', '10']),
        description='Shelf of the instrument part',
        a_eln={'component': 'EnumEditQuantity',
               'props': {
                   'suggestions': ['1', '2', '3', '4', '5', '6', '7', '8', '9', '10'],
               },
               },
    )

    def normalize(self, archive: 'EntryArchive', logger: 'BoundLogger') -> None:
        """
        The normalizer for the `FzMaterial` class.

        Args:
            archive (EntryArchive): The archive containing the section that is being
            normalized.
            logger (BoundLogger): A structlog logger.
        """
        super().normalize(archive, logger)


class CoilPart(
    FzInstrumentPart, ArchiveSection
):  # should not appear in the list of built-in schemas
    m_def = Section(
        categories=[IKZFZCategory],
        label='Fz Coil Part',
    )
    category = Quantity(
        type=str,
        default='Coil Part',
        a_eln={'component': 'StringEditQuantity'},
    )


class Coil(CoilPart, EntryData, ArchiveSection):
    m_def = Section(
        categories=[IKZFZCategory],
        label='Fz Coil',
        a_eln=ELNAnnotation(
            properties=SectionProperties(
                order=[
                    'name',
                    'lab_id',
                    'datetime',
                    'category',
                    'instrument_type',
                    'crystal_diameter_compatability',
                    'inside_diameter',
                    'coil_material',
                    'photo',
                    'documentation',
                    'cabinet',
                    'shelf',
                    'description',
                ],
            ),
            lane_width='800px',
        ),
    )
    # category = Quantity(
    #     type=str,
    #     default='Coil',
    #     a_eln={'component': 'StringEditQuantity'},
    # )
    instrument_type = Quantity(
        type=str,
        description='type of coil part',
        a_eln={
            'component': 'StringEditQuantity',
            'default': 'Coil',
        },
    )
    crystal_diameter_compatability = Quantity(
        type=np.float64,
        description='diameter of crystal in inch that fits in the coil',
        unit='inch',
        a_eln={
            'component': 'NumberEditQuantity',
            'defaultDisplayUnit': 'inch',
        },
    )
    inside_diameter = Quantity(
        type=np.float64,
        description='inside diameter of coil',
        a_eln={'component': 'NumberEditQuantity', 'defaultDisplayUnit': 'mm'},
        unit='mm',
    )
    coil_material = Quantity(
        type=MEnum(['Cu', 'Ag']),
        description='Material of the coil',
        default='Cu',
        a_eln={
            'component': 'EnumEditQuantity',
        },
    )
    documentation = Quantity(
        type=str,
        description='pdf files containing certificate and other documentation',
        a_eln={'component': 'FileEditQuantity'},
        a_browser={'adaptor': 'RawFileAdaptor'},
    )

    def normalize(self, archive: 'EntryArchive', logger: 'BoundLogger') -> None:
        """
        The normalizer for the `Seed` class.

        Args:
            archive (EntryArchive): The archive containing the section that is being
            normalized.
            logger (BoundLogger): A structlog logger.
        """
        super().normalize(archive, logger)


class CoilAuxiliary(CoilPart, EntryData, ArchiveSection):
    m_def = Section(
        categories=[IKZFZCategory],
        label='Fz Coil Auxiliary',
        a_eln=ELNAnnotation(
            properties=SectionProperties(
                order=[
                    'name',
                    'lab_id',
                    'datetime',
                    'category',
                    'instrument_type',
                    'photo',
                    'cabinet',
                    'shelf',
                    'description',
                ],
            ),
            lane_width='800px',
        ),
    )

    instrument_type = Quantity(
        type=str,
        description='type of coil part',
        a_eln={
            'component': 'EnumEditQuantity',
            'props': {
                'suggestions': [
                    'Induktor-Adapter',
                    'Induktor-Füsse',
                    'Induktor-',
                    'Rollinge Induktorfüsse',
                    'Induktor - Füße',
                ],
            },
        },
    )


class RodHolderParts(FzInstrumentPart, ArchiveSection):
    m_def = Section(
        categories=[IKZFZCategory],
        label='Fz Rod Holder Parts',
        a_eln=ELNAnnotation(
            properties=SectionProperties(
                order=[
                    'name',
                    'lab_id',
                    'datetime',
                    'category',
                    'instrument_type',
                    'photo',
                    'cabinet',
                    'shelf',
                    'description',
                ],
            ),
            lane_width='800px',
        ),
    )

    category = Quantity(
        type=str,
        default='Rod holder parts',
        a_eln={'component': 'StringEditQuantity'},
    )


class RodHolder(RodHolderParts, EntryData, ArchiveSection):
    m_def = Section(
        categories=[IKZFZCategory],
        label='Fz Rod Holder',
        a_eln=ELNAnnotation(
            properties=SectionProperties(
                order=[
                    'name',
                    'lab_id',
                    'datetime',
                    'category',
                    'instrument_type',
                    'photo',
                    'rod_holder_drawing',
                    'cabinet',
                    'shelf',
                    'description',
                ],
            ),
            lane_width='800px',
        ),
    )
    instrument_type = Quantity(
        type=str,
        description='type of Rod holder',
        a_eln={
            'component': 'EnumEditQuantity',
            'props': {
                'suggestions': ['Rodholder', 'Dänische Fassung'],
            },
        },
    )

    rod_holder_drawing = Quantity(
        type=str,
        description='pdf files containing certificate and other documentation',
        a_eln={'component': 'FileEditQuantity'},
        a_browser={'adaptor': 'RawFileAdaptor'},
    )

    def normalize(self, archive: 'EntryArchive', logger: 'BoundLogger') -> None:
        """
        The normalizer for the `Seed` class.

        Args:
            archive (EntryArchive): The archive containing the section that is being
            normalized.
            logger (BoundLogger): A structlog logger.
        """
        super().normalize(archive, logger)


class SpindleExtension(RodHolderParts, EntryData, ArchiveSection):
    m_def = Section(
        categories=[IKZFZCategory],
        label='Fz ZiehSpindel',
        a_eln=ELNAnnotation(
            properties=SectionProperties(
                order=[
                    'name',
                    'lab_id',
                    'datetime',
                    'category',
                    'instrument_type',
                    'photo',
                    'cabinet',
                    'shelf',
                    'description',
                ],
            ),
            lane_width='800px',
        ),
    )
    instrument_type = Quantity(
        type=str,
        description='type of Ziehspindel and related parts',
        a_eln={
            'component': 'EnumEditQuantity',
            'props': {
                'suggestions': [
                    'Ziehspindelverlängerung ',
                    'Ziehspindelverlängerungadapter ',
                    'Ziehspindelverlängerung lang (projekt)',
                    'Ziehspindelverlängerung klein für DF (projekt)',
                    'Ziehspindelverlängerung lang für DF',
                ],
            },
        },
    )

    def normalize(self, archive: 'EntryArchive', logger: 'BoundLogger') -> None:
        """
        The normalizer for the `Seed` class.

        Args:
            archive (EntryArchive): The archive containing the section that is being
            normalized.
            logger (BoundLogger): A structlog logger.
        """
        super().normalize(archive, logger)


class SeedHolder(FzInstrumentPart, EntryData, ArchiveSection):
    m_def = Section(
        categories=[IKZFZCategory],
        label='Fz Seed Holder',
        a_eln=ELNAnnotation(
            properties=SectionProperties(
                order=[
                    'name',
                    'lab_id',
                    'datetime',
                    'category',
                    'instrument_type',
                    'photo',
                    'seed_holder_drawing',
                    'cabinet',
                    'shelf',
                    'description',
                ],
            ),
            lane_width='800px',
        ),
    )
    category = Quantity(
        type=str,
        default='Seed holder',
        a_eln={'component': 'StringEditQuantity'},
    )
    instrument_type = Quantity(
        type=str,
        description='type of Seed holder',
        a_eln={
            'component': 'EnumEditQuantity',
            'props': {
                'suggestions': [
                    'Keimhalterung Prisma',
                    'Keimhalterung Rund',
                    'Keimhalterung',
                    'Kaimhalterung',
                    'Keimhalterung dünne Stäbe',
                ],
            },
        },
    )

    seed_holder_drawing = Quantity(
        type=str,
        description='pdf files containing certificate and other documentation',
        a_eln={'component': 'FileEditQuantity'},
        a_browser={'adaptor': 'RawFileAdaptor'},
    )

    def normalize(self, archive: 'EntryArchive', logger: 'BoundLogger') -> None:
        """
        The normalizer for the `Seed` class.

        Args:
            archive (EntryArchive): The archive containing the section that is being
            normalized.
            logger (BoundLogger): A structlog logger.
        """
        super().normalize(archive, logger)


class PreHeater(FzInstrumentPart, EntryData, ArchiveSection):
    m_def = Section(
        categories=[IKZFZCategory],
        label='Fz Pre-Heater',
        a_eln=ELNAnnotation(
            properties=SectionProperties(
                order=[
                    'name',
                    'lab_id',
                    'datetime',
                    'category',
                    'instrument_type',
                    'photo',
                    'pre_heater_drawing',
                    'cabinet',
                    'shelf',
                    'description',
                ],
            ),
            lane_width='800px',
        ),
    )
    category = Quantity(
        type=str,
        default='Pre-heater',
        a_eln={'component': 'StringEditQuantity'},
    )
    instrument_type = Quantity(
        type=str,
        description='type of Pre-heater',
        a_eln={
            'component': 'EnumEditQuantity',
            'props': {
                'suggestions': [
                    'IR',
                    'Graphite Shell',
                    'Ta Shell',
                    'Mo Shell',
                    'Other',
                ],
            },
        },
    )

    pre_heater_drawing = Quantity(
        type=str,
        description='pdf files containing certificate and other documentation',
        a_eln={'component': 'FileEditQuantity'},
        a_browser={'adaptor': 'RawFileAdaptor'},
    )

    def normalize(self, archive: 'EntryArchive', logger: 'BoundLogger') -> None:
        """
        The normalizer for the `Seed` class.

        Args:
            archive (EntryArchive): The archive containing the section that is being
            normalized.
            logger (BoundLogger): A structlog logger.
        """
        super().normalize(archive, logger)


class AfterHeater(FzInstrumentPart, EntryData, ArchiveSection):
    m_def = Section(
        categories=[IKZFZCategory],
        label='Fz After-Heater',
        a_eln=ELNAnnotation(
            properties=SectionProperties(
                order=[
                    'name',
                    'lab_id',
                    'datetime',
                    'category',
                    'instrument_type',
                    'after_heater_diameter' 'photo',
                    'after_heater_drawing',
                    'cabinet',
                    'shelf',
                    'description',
                ],
            ),
            lane_width='800px',
        ),
    )
    category = Quantity(
        type=str,
        default='After-heater',
        a_eln={'component': 'StringEditQuantity'},
    )
    instrument_type = Quantity(
        type=str,
        description='type of After-heater',
        a_eln={
            'component': 'StringEditQuantity',
        },
    )
    after_heater_diameter = Quantity(
        type=np.float64,
        description='after_heater diameter in mm',
        a_eln={'component': 'NumberEditQuantity', 'defaultDisplayUnit': 'millimeter'},
        unit='meter',
    )
    after_heater_drawing = Quantity(
        type=str,
        description='pdf files containing certificate and other documentation',
        a_eln={'component': 'FileEditQuantity'},
        a_browser={'adaptor': 'RawFileAdaptor'},
    )

    def normalize(self, archive: 'EntryArchive', logger: 'BoundLogger') -> None:
        """
        The normalizer for the `AfterHeater` class.

        Args:
            archive (EntryArchive): The archive containing the section that is being
            normalized.
            logger (BoundLogger): A structlog logger.
        """
        super().normalize(archive, logger)


class Reflector(FzInstrumentPart, EntryData, ArchiveSection):
    m_def = Section(
        categories=[IKZFZCategory],
        label='Fz Reflector',
        a_eln=ELNAnnotation(
            properties=SectionProperties(
                order=[
                    'name',
                    'lab_id',
                    'datetime',
                    'category',
                    'instrument_type',
                    'diameter',
                    'photo',
                    'reflector_drawing',
                    'cabinet',
                    'shelf',
                    'description',
                ],
            ),
            lane_width='800px',
        ),
    )
    category = Quantity(
        type=str,
        default='Reflector',
        a_eln={'component': 'StringEditQuantity'},
    )
    instrument_type = Quantity(
        type=str,
        description='type of Reflector',
        a_eln={
            'component': 'EnumEditQuantity',
            'props': {
                'suggestions': [
                    'Reflecktorring Ø=110mm',
                    'Reflecktorring Ø=122mm',
                    'Reflecktorring',
                    'Reflecktorring Ø=120mm',
                    'Reflecktorring Ø=70mm',
                ],
            },
        },
    )
    diameter = Quantity(
        type=np.float64,
        description='diameter of Reflector',
        a_eln={'component': 'NumberEditQuantity', 'defaultDisplayUnit': 'mm'},
        unit='m',
    )
    # instrument_type = Quantity(
    #     type=int,
    #     unit='mm',
    #     description='diameter of Reflector',
    #     a_eln={
    #         'component': 'EnumEditQuantity',
    #         'props': {
    #             'suggestions': [
    #                 110,
    #                 122,
    #                 120,
    #                 70,
    #             ],
    #         },
    #     },
    # )

    reflector_drawing = Quantity(
        type=str,
        description='pdf files containing certificate and other documentation',
        a_eln={'component': 'FileEditQuantity'},
        a_browser={'adaptor': 'RawFileAdaptor'},
    )

    def normalize(self, archive: 'EntryArchive', logger: 'BoundLogger') -> None:
        """
        The normalizer for the `Seed` class.

        Args:
            archive (EntryArchive): The archive containing the section that is being
            normalized.
            logger (BoundLogger): A structlog logger.
        """
        super().normalize(archive, logger)


class FzAuxiliaries(FzInstrumentPart, EntryData, ArchiveSection):
    m_def = Section(
        categories=[IKZFZCategory],
        label='Fz Auxiliaries',
        a_eln=ELNAnnotation(
            properties=SectionProperties(
                order=[
                    'name',
                    'lab_id',
                    'datetime',
                    'category',
                    'instrument_type',
                    'available_quantity',
                    'specification',
                    'photo',
                    'cabinet',
                    'shelf',
                    'description',
                ],
            ),
            lane_width='800px',
        ),
    )
    category = Quantity(
        type=str,
        default='Auxiliaries',
        a_eln={'component': 'StringEditQuantity'},
    )
    instrument_type = Quantity(
        type=str,
        description='type of Auxiliary Part',
        a_eln={
            'component': 'EnumEditQuantity',
            'props': {
                'suggestions': [
                    'Keramikstifte',
                    'Induktor - O-Ringe',
                    'Graphit',
                    'Abdrückkeramik ',
                    'Stützsystem - Abtropfringe ',
                    'Schrauben Stab-/Keimhalter',
                    'Cu-Schrauben',
                    'Schrauben',
                    'Adapter Wasser',
                    'Klemmen Fensterglas',
                    'Blindflansch Gas',
                    'Stützsystem - Federn ',
                    'Induktor- Schrauben',
                    'Schraube und Mutter',
                    'Si - Lampenheizung für 1505-2',
                    'IR - Lampen ',
                ],
            },
        },
    )

    available_quantity = Quantity(
        type=int,
        description='quantity of the auxiliary part available',
        a_eln={'component': 'NumberEditQuantity'},
    )
    specification = Quantity(
        type=str,
        description='specification of the auxiliary part',
        a_eln={'component': 'StringEditQuantity'},
    )
    # reflector_drawing = Quantity(
    #     type=str,
    #     description='pdf files containing certificate and other documentation',
    #     a_eln={'component': 'FileEditQuantity'},
    #     a_browser={'adaptor': 'RawFileAdaptor'},
    # )

    def normalize(self, archive: 'EntryArchive', logger: 'BoundLogger') -> None:
        """
        The normalizer for the `Seed` class.

        Args:
            archive (EntryArchive): The archive containing the section that is being
            normalized.
            logger (BoundLogger): A structlog logger.
        """
        super().normalize(archive, logger)


class FzInstrumentParts(InstrumentReference, ArchiveSection):
    """
    Class autogenerated from yaml schema.
    """

    m_def = Section()
    reference = Quantity(
        type=FzInstrumentPart,
        a_eln={'component': 'ReferenceEditQuantity'},
        a_label='Fz Instrument Part Reference',
    )

    def normalize(self, archive: 'EntryArchive', logger: 'BoundLogger') -> None:
        """
        The normalizer for the `Fz_Materials` class.

        Args:
            archive (EntryArchive): The archive containing the section that is being
            normalized.
            logger (BoundLogger): A structlog logger.
        """
        super().normalize(archive, logger)


class MySchema(Schema):
    name = Quantity(
        type=str, a_eln=ELNAnnotation(component=ELNComponentEnum.StringEditQuantity)
    )
    message = Quantity(type=str)

    def normalize(self, archive: 'EntryArchive', logger: 'BoundLogger') -> None:
        super().normalize(archive, logger)

        logger.info('MySchema.normalize', parameter=configuration.parameter)
        self.message = f'Hello {self.name}!'


class FzMaterial(CompositeSystem, ArchiveSection):
    """
    Class autogenerated from yaml schema.
    """

    m_def = Section()
    picture = Quantity(
        type=str,
        description='Foto of the instrument part',
        a_browser={'adaptor': 'RawFileAdaptor'},
        a_eln={'component': 'FileEditQuantity'},
    )
    description = Quantity(
        type=str,
        description='description of the material',
        a_eln={'component': 'StringEditQuantity'},
    )
    comment = Quantity(
        type=str,
        description='detailed description of the material',
        a_eln={'component': 'RichTextEditQuantity'},
    )
    def normalize(self, archive: 'EntryArchive', logger: 'BoundLogger') -> None:
        """
        The normalizer for the `FzMaterial` class.

        Args:
            archive (EntryArchive): The archive containing the section that is being
            normalized.
            logger (BoundLogger): A structlog logger.
        """
        super().normalize(archive, logger)

class Feedstock(FzMaterial, EntryData, ArchiveSection):
    m_def = Section(
        categories=[IKZFZCategory],
        label='Fz Feedstock',
        # links=[],
        a_eln=ELNAnnotation(
             properties=SectionProperties(
                order=[
                    'name',
                    'lab_id',
                    'datetime',
                    'supplier',
                    'grain_size',
                    'storage_location',
                    'picture',
                    'description',
                    'comment',   
                ],
            ),
        ),
    )
    grain_size = Quantity(
        type=np.float64,
        description='grain size of feedstock',
        a_eln={'component': 'NumberEditQuantity', 'defaultDisplayUnit': 'mm'},
        unit='mm',
    )

    supplier = Quantity(
        type=MEnum(['Wacker', 'REC', 'other']),
        description='feedstock material options',
        a_eln={'component': 'EnumEditQuantity'},
    )
    storage_location = Quantity(
        type=str,
        description='location of feedstock',
        a_eln={
            'component': 'EnumEditQuantity',
            'props': {
                'suggestions': [
                    'Wagen FZ-Halle',
                    'Keller',
                    'FZ Halle Regal',
                    'Kiste Keller',
                    'Kiste Glaspasage',
                    'Sent to Etching',
                    'FZ 1520',
                    'FZ 1505-2',
                    'FZ 30',
                    'consumed',
                    #'other - add in comment where!',
                ],
            },
        },
    )
    # description = Quantity(
    #     type=str,
    #     description='description of feedstock',
    #     a_eln={'component': 'RichTextEditQuantity', 'label': 'comment'},
    #     # a_eln=ELNAnnotation(label='comment',
    #     # ,
    # )
    lab_id = Quantity(
        type=str,
        description=(
            'lab id of feedstock, it takes the ID from the name of the feedstock entry'
        ),
        a_eln=ELNAnnotation(
            component='StringEditQuantity',
            label='ID',
        ),
    )
    name = Quantity(
        type=str,
        description='name of feedstock which also represents its ID ',
        a_eln={'component': 'StringEditQuantity'},
    )

class Feed_rod(FzMaterial, EntryData, ArchiveSection):  # FzMaterial
    """
    Class autogenerated from yaml schema.
    """

    # m_def = Section(
    #     a_display={
    #         'order': [
    #             'name',
    #             'lab_id',
    #             'datetime',
    #             'diameter',
    #             'length',
    #             'weight',
    #             'rod_surface',
    #             'rod_pretreatment',
    #             'rod_angle',
    #             'chemical_formula',
    #             'storage_location',
    #             'sharpened',
    #             'etched',
    #             'status',
    #             'description',
    #         ]
    #     },
    # )

    m_def = Section(
        categories=[IKZFZCategory],
        label='Fz Feed Rod',
        # links=[],
        a_eln=ELNAnnotation(
            properties=SectionProperties(
                order=[
                    'name',
                    'lab_id',
                    'datetime',
                    'supplier',
                    # 'furnace_type_compatibility',
                    'feed_rod_resistivity',
                    #'diameter',
                    'diameter_category',
                    'diameter_measured',
                    'length',
                    #'weight',
                    'rod_surface',
                    'rod_pretreatment',
                    'rod_angle',
                    'mass',
                    # 'chemical_formula', not needed or default value = Si
                    'storage_location',
                    'sharpened',
                    'etched',
                    'etching_location',
                    'etch_date',
                    'status',
                    'picture',
                    'description',
                    'comment',
                ],
            ),
            hide=['diameter'],
            lane_width='800px',
        ),
    )

    supplier = Quantity(
        type=str,
        description='feed rod material options',
        a_eln={'component': 'EnumEditQuantity',
               'props': {
                   'suggestions': ['Wacker', 'REC', 'ASIMI', ],
               },
               },
    )
    diameter = Quantity(
        type=MEnum(['100 mm', '126 - 130 mm', 'other']),
        description='diameter of feed rod',
        a_eln={
            'component': 'EnumEditQuantity',
        },
        # unit='mm',
    )
    diameter_category = Quantity(
        type=str,
        description='diameter category of feed rod',
        a_eln={
            'component': 'EnumEditQuantity',
            'props':{
                'suggestions': ['3 mm', '8 mm', '100 mm', '126 - 130 mm', '150 mm' ],
            },
        },
        # unit='mm',
    )
    diameter_measured = Quantity(
        type=np.float64,
        description='manually measured diameter of feed rod',
        a_eln={'component': 'NumberEditQuantity', 'defaultDisplayUnit': 'mm'},
        unit='m',
    )
    length = Quantity(
        type=np.float64,
        description=(
            'length of feed rod calculated automatically from length, '
            'diameter measured and rod angle.'
        ),
        a_eln={'component': 'NumberEditQuantity', 'defaultDisplayUnit': 'mm'},
        unit='mm',
    )
    mass = Quantity(
        type=np.float64,
        description='mass of feed rod. Calculated from length, diameter and rod angle',
        a_eln={'component': 'NumberEditQuantity', 'defaultDisplayUnit': 'kg'},
        unit='kg',
    )
    rod_surface = Quantity(
        type=MEnum(['round grinded', 'raw']),
        description='rod surface condition',
        a_eln={'component': 'EnumEditQuantity'},
    )
    # rod_pretreatment = Quantity(
    #     type=MEnum(['etched', 'raw', 'US cleaned']),
    #     description='rod pretreatment',
    #     a_eln={'component': 'EnumEditQuantity'},
    # )
    rod_angle = Quantity(
        type=np.float64,
        description='angle of feed rod',
        a_eln={'component': 'NumberEditQuantity', 'defaultDisplayUnit': 'deg'},
        unit='deg',
    )

    # chemical_formula = Quantity(
    #     type=str,
    #     description='chemical formula of feed rod',
    #     a_eln={'component': 'StringEditQuantity'},
    # )
    status = Quantity(
        type=MEnum(
            [
                'needs to be etched',
                'ready to use',
                'sent to etching',
                'needs to be sharpened',
                'in use',
                'consumed',
            ]
        ),
        description="""
            current status of the feed rod. Dependent on the values of `sharpened`
            and `etched` and `location` or if used in a Fz process, 
            the status gets updated automatically.
            """,
        a_eln={},
    )
    sharpened = Quantity(
        type=bool,
        description='tick if rod is sharpened',
        default=False,
        a_eln={'component': 'BoolEditQuantity'},
    )
    etched = Quantity(
        type=bool,
        default=False,
        description='tick if rod is etched',
        a_eln={'component': 'BoolEditQuantity'},
    )
    etch_date = Quantity(
        type=Datetime,
        a_eln={'component': 'DateTimeEditQuantity'},
    )
    etching_location = Quantity(
        type=MEnum(
            [
                'in house',
                'company',
            ]
        ),
        description='tick if rod was etched at IKZ',
        a_eln={'component': 'RadioEnumEditQuantity'},
    )
    # add a quantity to choose
    # furnace_type_compatibility = Quantity(
    #     type=MEnum(
    #         [
    #             'PVA TePla',
    #             'Steremat',
    #         ]
    #     ),
    #     description='Furnace rod holder compatibility',
    #     a_eln={'component': 'EnumEditQuantity'},
    # )
    feed_rod_resistivity = Quantity(
        type=MEnum(
            [
                'standard resistivity',
                'high resistivity',
            ]
        ),
        description='resistivity of the feed rod',
        a_eln={'component': 'EnumEditQuantity'},
    )
    # ready_to_use = Quantity(
    #    type=bool,
    #    description='tick if rod is ready to use',
    #    a_eln={'component': 'BoolEditQuantity'},
    # )
    storage_location = Quantity(
        type=str,
        description='location of feed rod',
        a_eln={
            'component': 'EnumEditQuantity',
            'props': {
                'suggestions': [
                    'Wagen FZ-Halle',
                    'Keller',
                    'FZ Halle Regal',
                    'Kiste Keller',
                    'Kiste Glaspasage',
                    'Sent to Etching',
                    'FZ 1520',
                    'FZ 1505-2',
                    'FZ 30',
                    'consumed',
                    #'other - add in comment where!',
                ],
            },
        },
    )
    # description = Quantity(
    #     type=str,
    #     description='description of feed rod',
    #     a_eln={'component': 'RichTextEditQuantity', 'label': 'comment'},
    #     # a_eln=ELNAnnotation(label='comment',
    #     # ,
    # )
    lab_id = Quantity(
        type=str,
        description=(
            'lab id of feed rod, it takes the ID from the name of the feed rod entry'
        ),
        a_eln=ELNAnnotation(
            component='StringEditQuantity',
            label='ID',
        ),
    )
    name = Quantity(
        type=str,
        description='name of feed rod which also represents its ID ',
        a_eln={'component': 'StringEditQuantity'},
    )

    def normalize(self, archive, logger: BoundLogger) -> None:  # noqa: PLR0912
        """
        The normalizer for the `Feed_rod` class.

        Args:
            archive (EntryArchive): The archive containing the section that is being
            normalized.
            logger (BoundLogger): A structlog logger.
        """
        # super(Feed_rod, self).normalize(archive, logger)
        if self.name is not None:
            self.lab_id = self.name

        if self.storage_location == 'Sent to Etching':
            self.sharpened = True
            self.etched = False
            self.status = 'sent to etching'
        elif (
            not self.sharpened
            and not self.etched
            and self.storage_location
            not in ['Sent to Etching', 'consumed', 'FZ 30', 'FZ 1520', 'FZ 1505-2']
        ):
            self.status = 'needs to be sharpened'

        elif (
            self.sharpened
            and not self.etched
            and self.storage_location
            not in ['Sent to Etching', 'consumed', 'FZ 30', 'FZ 1520', 'FZ 1505-2']
        ):
            self.status = 'needs to be etched'

        elif (
            self.sharpened
            and not self.etched
            and self.storage_location == 'Sent to Etching'
        ):
            self.status = 'sent to etching'

        elif (
            self.sharpened
            and self.etched
            and self.storage_location
            not in ['Sent to Etching', 'consumed', 'FZ 30', 'FZ 1520', 'FZ 1505-2']
        ):
            self.status = 'ready to use'

        elif (
            not self.sharpened
            and self.etched
            and self.storage_location
            not in ['Sent to Etching', 'consumed', 'FZ 30', 'FZ 1520', 'FZ 1505-2']
        ):
            self.status = 'ready to use'
            self.sharpened = True

        elif self.storage_location == 'consumed':
            self.status = 'consumed'
            self.etched = False
            self.sharpened = False
        elif (
            self.storage_location in {'FZ 30', 'FZ 1520', 'FZ 1505-2'}
        ):
            self.status = 'in use'
            self.etched = False
            self.sharpened = False

        # add formula to calculate mass
        if self.length and self.diameter_measured and self.rod_angle:
            radius = self.diameter_measured.to('cm').magnitude / 2
            length = self.length.to('cm').magnitude
            angle = self.rod_angle.to('radian').magnitude
            density_Si = 2.336
            self.mass = (
                # 1/3dpi*(r^3)/tan(ang)
                # mass of the cylinder
                (
                    np.pi * (radius**2) * length
                    + (1 / 3) * np.pi * (radius**3) / np.tan(angle)
                )
                * (density_Si)
                / 1000
            )
        if self.diameter == "100 mm":
            self.diameter_category = '100 mm'
        elif self.diameter == '126 - 130 mm':
            self.diameter_category = '126 - 130 mm'    
        # elif self.diameter == 'other':
        #     self.diameter_category = 'other'    

        super().normalize(archive, logger)

class Seed(FzMaterial, EntryData, ArchiveSection):
    """
    Class autogenerated from yaml schema.
    """

    m_def = Section(
        categories=[IKZFZCategory],
        label='Fz Seed',
    )
    orientation = Quantity(
        type=MEnum(['100', '111', 'Other']),
        description='seed orientation',
        a_eln={'component': 'EnumEditQuantity'},
    )
    seed_batch = Quantity(
         type=str,
        description='batch of the seed material',
        a_eln={'component': 'StringEditQuantity'},
    )
    # chemical_formula = Quantity(
    #     type=str,
    #     description='chemical formula of feed rod',
    #     a_eln={'component': 'StringEditQuantity'},
    # )

    def normalize(self, archive: 'EntryArchive', logger: 'BoundLogger') -> None:
        """
        The normalizer for the `Seed` class.

        Args:
            archive (EntryArchive): The archive containing the section that is being
            normalized.
            logger (BoundLogger): A structlog logger.
        """
        super().normalize(archive, logger)


class FzCrystal(FzMaterial, EntryData, ArchiveSection):
    """
    Class autogenerated from yaml schema.
    """

    m_def = Section(
        categories=[IKZFZCategory],
        label='Fz Crystal',
        a_eln=ELNAnnotation(
            properties=SectionProperties(
                order=[
                    'name',
                    #'lab_id',
                    'datetime',
                    'process_date',
                    'fz_furnace',
                    'orientation',
                    'diameter',
                    'length',
                    'weight',
                    'resistivity',
                    'doping_type',
                    'location',
                    # 'chemical_formula', not needed or default value = Si
                    'status',
                    'description',
                ],
            ),
            lane_width='800px',
        ),
    )
    name = Quantity(
        type=str,
        description='name of crystal',
        a_eln={'component': 'StringEditQuantity'},
    )
    lab_id = Quantity(
        type=str,
        description='lab id of crystal',  
        # a_eln={'component': 'StringEditQuantity'},
    )
    # datetime = (
    #     Quantity(
    #         type=Datetime,
    #         description='date and time of data entry creation or upload',
    #     ),
    # )
    process_date = Quantity(
        type=Datetime,
        description='date of crystal growth',
        a_eln={'component': 'DateTimeEditQuantity'},
    )
    # description_crystal = Quantity(
    #     type=str,
    #     description='description of crystal',
    #     a_eln={'component': 'StringEditQuantity'},
    # )
    status = Quantity(
        type=str,
        description='status of the crystal',
        a_eln={
            'component': 'EnumEditQuantity',
            'props': {
                'suggestions': [
                    'sold',
                    'reserved',
                    'used for seeds',
                ]
            },
        },
    )

    # fz_furnace = Quantity(
    #     type=str,
    #     description='fz furnace used to grow this crystal',
    #     a_eln={'component': 'StringEditQuantity'},
    # )
    fz_furnace = Quantity(
        type=str,
        description='fz furnace used to grow this crystal',
        a_eln={
            'component': 'EnumEditQuantity',
            'props': {
                'suggestions': [
                    'FZ 1505-1',
                    'FZ 1505-2',
                    'FZ 1520',
                    'FZ 30',
                ]
            },
        },
    )

    diameter = Quantity(
        type=np.float64,
        description='diameter of crystal',
        a_eln={'component': 'NumberEditQuantity', 'defaultDisplayUnit': 'mm'},
        unit='mm',
    )
    length = Quantity(
        type=np.float64,
        description='length of crystal',
        a_eln={'component': 'NumberEditQuantity', 'defaultDisplayUnit': 'mm'},
        unit='mm',
    )
    orientation = Quantity(
        type=str,
        description='orientation of crystal',
        a_eln={
            'component': 'EnumEditQuantity',
            'props': {'suggestions': ['<100>', '<111>', 'polycrystalline']},
        },
    )
    # resistivity = Quantity(
    #     type=np.float64,
    #     description='resistance of crystal',
    #     a_eln={'component': 'NumberEditQuantity', 'defaultDisplayUnit': 'ohm cm'},
    #     unit='ohm cm',
    # )
    doping_type = Quantity(
        type=MEnum(
            [
                'p',
                'n',
                'p/n',
                'undoped',
            ]
        ),
        description='doping type of the crystal',
        a_eln={'component': 'EnumEditQuantity'},
    )
    location = Quantity(
        type=str,
        description='location of crystal',
        a_eln={
            'component': 'EnumEditQuantity',
            'props': {
                'suggestions': [
                    'Schrank Büro R. 124',
                    'Schrank zw. FZ 20 und CZ',
                    'Schrank zw. FZ 20 und CZ, weiße Plastikkiste',
                    'Schrank hinter FZ 30',
                    'Schrank hinter FZ 30, weiße Pappkiste',
                    'Schrank hinter FZ 30, weiße Plastikkiste',
                    'Schrank hinter FZ 30, Rote Kiste',
                    'Rollwagen (Siltronic 4V), Züchtungshalle',
                    'Rollwagen FZ 1520',
                    'Rollwagen mitte, Züchtungshalle',
                    'Schrank hinter EKZ 200',
                    'Kristallregal Züchtungshalle',
                    'other - add in comment where!',
                ]
            },
        },
    )
    resistivity_measurement = SubSection(
        section_def=Resistivity,
    )

    def normalize(self, archive: 'EntryArchive', logger: 'BoundLogger') -> None:
        """
        The normalizer for the `FzCrystal` class.

        Args:
            archive (EntryArchive): The archive containing the section that is being
            normalized.
            logger (BoundLogger): A structlog logger.
        """
        super().normalize(archive, logger)
        if self.name is not None:
            self.lab_id = self.name
        if self.resistivity_measurement is None:
            self.resistivity_measurement = Resistivity()


class Gas(FzMaterial, EntryData, ArchiveSection):
    """
    Class autogenerated from yaml schema.
    """

    m_def = Section(
        a_eln=None,
        categories=[IKZFZCategory],
        label='Fz Gas',
    )
    substance = Quantity(
        type=str,
        description='name of gas',
        a_eln={'component': 'StringEditQuantity'},
    )
    gas_source = Quantity(
        type=MEnum(['from bottle', 'from pipeline', 'Other']),
        description='source type of gas',
        a_eln={'component': 'EnumEditQuantity'},
    )

    def normalize(self, archive: 'EntryArchive', logger: 'BoundLogger') -> None:
        """
        The normalizer for the `Gas` class.

        Args:
            archive (EntryArchive): The archive containing the section that is being
            normalized.
            logger (BoundLogger): A structlog logger.
        """
        super().normalize(archive, logger)


class Dopant(FzMaterial, EntryData, ArchiveSection):
    """
    Class autogenerated from yaml schema.
    """

    m_def = Section(
        a_eln=None,
        categories=[IKZFZCategory],
        label='Fz Dopant',
    )
    doping_substance = Quantity(
        type=MEnum(['PH3', 'B2H6', 'CH4', 'Other']),
        description='name/type of dopant',
        a_eln={'component': 'EnumEditQuantity'},
    )
    doping_source_type = Quantity(
        type=MEnum(['from bottle', 'from pipeline', 'Other']),
        description='source type of dopant',
        a_eln={'component': 'EnumEditQuantity'},
    )


class Fz_Materials(CompositeSystemReference, ArchiveSection):
    """
    Class autogenerated from yaml schema.
    """

    m_def = Section()
    reference = Quantity(
        type=FzMaterial,
        a_eln={'component': 'ReferenceEditQuantity'},
        a_label='Fz Material Reference',
    )

    def normalize(self, archive: 'EntryArchive', logger: 'BoundLogger') -> None:
        """
        The normalizer for the `Fz_Materials` class.

        Args:
            archive (EntryArchive): The archive containing the section that is being
            normalized.
            logger (BoundLogger): A structlog logger.
        """
        super().normalize(archive, logger)


class FzGrowthStep(ProcessStep, ArchiveSection):
    """
    Class autogenerated from yaml schema.
    """

    #m_def = Section()
    m_def = Section()#a_eln=dict(overview=True))

    def normalize(self, archive: 'EntryArchive', logger: 'BoundLogger') -> None:
        """
        The normalizer for the `FzGrowthStep` class.

        Args:
            archive (EntryArchive): The archive containing the section that is being
            normalized.
            logger (BoundLogger): A structlog logger.
        """
        super().normalize(archive, logger)


class RodHolderAssembly(InstrumentReference, ArchiveSection):
    m_def = Section()
    reference = Quantity(
        type=RodHolderParts,
        a_eln={'component': 'ReferenceEditQuantity'},
    )
    position = Quantity(
        type=MEnum(["up" , "down"]),
        description='position of the rod holder in upper or lower spindle',
        a_eln={'component': 'EnumEditQuantity'},
    )


class CoilAssembly(InstrumentReference, ArchiveSection):
    m_def = Section()
    reference = Quantity(
        type=CoilPart,
        a_eln={'component': 'ReferenceEditQuantity'},
    )


class ReflectorAssembly(InstrumentReference, ArchiveSection):
    m_def = Section()
    reference = Quantity(
        type=Reflector,
        a_eln={'component': 'ReferenceEditQuantity'},
    )
    position = Quantity(
        type=str,
        description='position of the reflector in the furnace',
        a_eln={'component': 'StringEditQuantity'},
    )


class PreheaterAssembly(InstrumentReference, ArchiveSection):
    m_def = Section()
    reference = Quantity(
        type=PreHeater,
        a_eln={'component': 'ReferenceEditQuantity'},
    )
    position = Quantity(
        type=MEnum(["below inductor", "above inductor"]),
        description='position of the preheater in the furnace',
        a_eln={'component': 'EnumEditQuantity'},
    )


class AfterHeaterAssembly(InstrumentReference, ArchiveSection):
    m_def = Section()
    reference = Quantity(
        type=AfterHeater,
        a_eln={'component': 'ReferenceEditQuantity'},
    )
    position = Quantity(
        type=str,
        description='position of the after-heater in the furnace',
        a_eln={'component': 'StringEditQuantity'},
    )


class SeedHolderAssembly(InstrumentReference, ArchiveSection):
    m_def = Section()
    reference = Quantity(
        type=SeedHolder,
        a_eln={'component': 'ReferenceEditQuantity'},
    )
    position = Quantity(
        type=MEnum(["up" , "down"]),
        description='position of the seed holderin upper or lower spindle',
        a_eln={'component': 'EnumEditQuantity'},
    )


class FzAuxiliariesAssembly(InstrumentReference, ArchiveSection):
    m_def = Section()
    reference = Quantity(
        type=FzAuxiliaries,
        a_eln={'component': 'ReferenceEditQuantity'},
    )


class Assembly(ArchiveSection): #PlotSection
    """
    Class autogenerated from yaml schema.
    """
    m_def = Section()#a_eln=dict(overview=True))
    
    # name = Quantity(
    #     type=str,
    #     description=' ',
    #     a_eln={'component': 'StringEditQuantity'},
    #     default='Assembly',
    # )
    
    # step_type = Quantity(
    #     type=MEnum(
    #         ['Pre-process', 'Process', 'Post-process', 'Characterization', 'Storage']
    #     ),
    #     a_eln={'component': 'EnumEditQuantity'},
    #     default=['Pre-process'],
    # )
    # furnace_parts = SubSection(
    #     section_def=FzInstrumentParts,
    #     repeats=True,
    # )
    rod_holder_parts = SubSection(
        section_def=RodHolderAssembly,
        repeats=True,
    )
    coil_parts = SubSection(
        section_def=CoilAssembly,
        repeats=True,
    )
    reflector_parts = SubSection(
        section_def=ReflectorAssembly,
        repeats=True,
    )
    preheater_parts = SubSection(
        section_def=PreheaterAssembly,
        repeats=True,
    )
    afterheater_parts = SubSection(
        section_def=AfterHeaterAssembly,
        repeats=True,
    )
    seed_holder_parts = SubSection(
        section_def=SeedHolderAssembly,
        repeats=True,
    )
    auxiliaries_parts = SubSection(
        section_def=FzAuxiliariesAssembly,
        repeats=True,
    )

    def normalize(self, archive: 'EntryArchive', logger: 'BoundLogger') -> None:
        """
        The normalizer for the `Assembly` class.

        Args:
            archive (EntryArchive): The archive containing the section that is being
            normalized.
            logger (BoundLogger): A structlog logger.
        """

        super().normalize(archive, logger)
        
class DigitalProtocol1520(FzGrowthStep, EntryData, ArchiveSection):
    """
    Class autogenerated from yaml schema.
    """

    m_def = Section(
        a_eln=None,
        # Uasoll, Hubunten, Huboben, Durchmesserunten
        a_plot=[
            {
                'label': 'voltage_set',
                'x': 'timestamp',
                'y': ['voltage_set'],
            },
            {
                'label': 'lower_diameter_crystal',
                'x': 'timestamp',
                'y': ['lower_diameter_crystal'],
            },
            # {'label': 'zone_height', 'x': 'timestamp', 'y': ['zone_height']},
            {
                'label': 'upper_pull_speed_rod',
                'x': 'timestamp',
                'y': ['upper_pull_speed_rod'],
            },
            {
                'label': 'lower_pull_speed_crystal',
                'x': 'timestamp',
                'y': ['lower_pull_speed_crystal'],
            },
            {
                'label': 'voltage_set vs. lower diamenter crystal',
                'x': 'lower_diameter_crystal',
                'y': 'voltage_set',
            },
            {
                'label': 'all time-dependent data',
                'x': 'timestamp',
                'y': [
                    'voltage_set',
                    'lower_diameter_crystal',
                    'zone_height',
                    'upper_pull_speed_rod',
                ],
            },
        ],
    )
    data_file = Quantity(
        type=str,
        description="""
        A reference to an uploaded .xlsx
        """,
        a_browser={'adaptor': 'RawFileAdaptor'},
        a_eln={'component': 'FileEditQuantity'},
    )
    # measurment_no = Quantity(
    #     type=np.float64,
    #     a_tabular={'name': 'Index'},
    #     shape=['*'],
    # )
    timestamp = Quantity(
        type=Datetime,
        description='Datum_Zeit',
        shape=['*'],
    )
    upper_position_rod = Quantity(
        type=np.float64,
        description='PosOben (PosHubOb)',
        unit='millimeter',
        shape=['*'],
    )
    upper_pull_speed_rod = Quantity(
        type=np.float64,
        description='HubOben (SollHubOb)',
        unit='millimeter/minute',
        shape=['*'],
    )
    upper_rotation_rod = Quantity(
        type=np.float64,
        description='RotOben (SollRotOben)',
        unit='1/minute',
        shape=['*'],
    )
    lower_position_crystal = Quantity(
        type=np.float64,
        descriptioin='PosUnten (SollPosUnten)',
        unit='millimeter',
        shape=['*'],
    )
    lower_pull_speed_crystal = Quantity(
        type=np.float64,
        description='HubUnten (SollHubUnt)',
        unit='millimeter/minute',
        shape=['*'],
    )
    lower_rotation_crystal = Quantity(
        type=np.float64,
        description='RotUnt (SollRotUnten)',
        unit='1/minute',
        shape=['*'],
    )
    # control_parameter = Quantity(
    #     type=str,
    #     a_tabular={
    #         "name": "Betr.Art"
    #     },
    #     shape=["*"],
    # )
    voltage_set = Quantity(
        type=np.float64,
        description='SollUa (Gen-Soll, Control parameter)',
        unit='kV',
        shape=['*'],
    )
    power_actual = Quantity(
        type=np.float64,
        description='P (P-Ist)',
        unit='kW',
        shape=['*'],
    )
    current_actual = Quantity(
        type=np.float64,
        description='Ia (Ia-Ist)',
        unit='A',
        shape=['*'],
    )
    voltage_actual = Quantity(
        type=np.float64,
        description='IstUa (Ua-Ist)',
        unit='kV',
        shape=['*'],
    )
    grid_current = Quantity(
        type=np.float64,
        description='Ig (Ig-Ist)',
        unit='A',
        shape=['*'],
    )
    # high_frequency_current = Quantity(
    #     type=np.float64,
    #     a_tabular={
    #         "name": "I-hf"
    #     },
    #     unit="A",
    #     shape=["*"],
    # )
    # high_frequency_voltage = Quantity(
    #     type=np.float64,
    #     a_tabular={
    #         "name": "U-hf"
    #     },
    #     unit="kV",
    #     shape=["*"],
    # )
    frequency_setpoint = Quantity(
        type=np.float64,
        description='f=Soll (f-HF)',
        unit='MHz',
        shape=['*'],
    )
    frequency_actual = Quantity(
        type=np.float64,
        description='f=Ist',
        unit='MHz',
        shape=['*'],
    )
    # inner_mechanisms_position_arbkr = Quantity(
    #     type=np.float64,
    #     a_tabular={
    #         "name": "Pos-Arbkr"
    #     },
    #     unit="millimeter",
    #     shape=["*"],
    # )
    # inner_mechanisms_position_spindel = Quantity(
    #     type=np.float64,
    #     a_tabular={
    #         "name": "Pos-Spindel"
    #     },
    #     unit="millimeter",
    #     shape=["*"],
    # )
    # inner_mechanisms_position_nachheizen = Quantity(
    #     type=np.float64,
    #     a_tabular={
    #         "name": "Pos-Nachheiz"
    #     },
    #     unit="millimeter",
    #     shape=["*"],
    # )
    upper_diameter_rod = Quantity(
        type=np.float64,
        description='DurchmObn',
        unit='millimeter',
        shape=['*'],
    )
    lower_diameter_crystal = Quantity(
        type=np.float64,
        description='DurchmUnt',
        unit='millimeter',
        shape=['*'],
    )
    zone_height = Quantity(
        type=np.float64,
        description='ZonenHo',
        unit='millimeter',
        shape=['*'],
    )
    # meniscus_angle_on_left_side = Quantity(
    #     type=np.float64,
    #     a_tabular={
    #         "name": "WinkelLi"
    #     },
    #     unit="degree",
    #     shape=["*"],
    # )
    # meniscus_angle_on_right_side = Quantity(
    #     type=np.float64,
    #     a_tabular={
    #         "name": "WinkelRe"
    #     },
    #     unit="degree",
    #     shape=["*"],
    # )

    def normalize(self, archive: 'EntryArchive', logger: 'BoundLogger') -> None:
        """
        The normalizer for the `DigitalProtocol1520` class.

        Args:
            archive (EntryArchive): The archive containing the section that is being
            normalized.
            logger (BoundLogger): A structlog logger.
        """
        super().normalize(archive, logger)
        colnames = [
            'measurment_no',
            'date',
            'time',
            'upper_position_rod',
            'upper_pull_speed_rod',
            'upper_rotation_rod',
            'lower_position_crystal',
            'lower_pull_speed_crystal',
            'lower_rotation_crystal',
            'voltage_set',
            'power_actual',
            'current_actual',
            'voltage_actual',
            'grid_current',
            'frequency_setpoint',
            'frequency_actual',
            'upper_diameter_rod',
            'lower_diameter_crystal',
            'zone_height',
        ]
        if self.data_file:
            with archive.m_context.raw_file(
                self.data_file,
                'r',
                encoding='latin1',
            ) as file:
                df_process = pd.read_csv(
                    file,
                    sep=';',
                    encoding='latin1',
                    names=colnames,
                    skiprows=1,
                )
                # df_process['datum'] = ((df_process['date'] + ' ' + df_process['time'])

                # df_process['datum']  # .values
                # self.measurment_no = df_process['0']
                df_process['datum'] = pd.to_datetime(
                    df_process['date'] + ' ' + df_process['time'],
                    format='%y.%m.%d %H:%M:%S',
                )
                # df_process['datum'] = df_process['datum'].dt.strftime(
                #     '%Y-%m-%dT%H:%M:%S%z'
                # )
                self.timestamp = pd.to_datetime(
                    df_process['datum']
                ).to_list()  # .values[0]
                self.upper_position_rod = df_process['upper_position_rod']
                self.upper_pull_speed_rod = df_process['upper_pull_speed_rod']
                self.upper_rotation_rod = df_process['upper_rotation_rod']
                self.lower_position_crystal = df_process['lower_position_crystal']
                self.lower_pull_speed_crystal = df_process['lower_pull_speed_crystal']
                self.lower_rotation_crystal = df_process['lower_rotation_crystal']
                self.voltage_set = df_process['voltage_set']
                self.power_actual = df_process['power_actual']
                self.current_actual = df_process['current_actual']
                self.voltage_actual = df_process['voltage_actual']
                self.grid_current = df_process['grid_current']
                self.frequency_setpoint = df_process['frequency_setpoint']
                self.frequency_actual = df_process['frequency_actual']
                self.upper_diameter_rod = df_process['upper_diameter_rod']
                self.lower_diameter_crystal = df_process['lower_diameter_crystal']
                self.zone_height = df_process['zone_height']


class FzFurnace(FzInstrument, EntryData, ArchiveSection):
    m_def = Section()
class FzInstrumentReference(InstrumentReference):
    m_def = Section() #a_eln=dict(overview=True))
    reference = Quantity(
        type=FzInstrument,
        a_eln={'component': 'ReferenceEditQuantity', 'label': 'Fz Instrument'},
    )

    def normalize(self, archive: 'EntryArchive', logger: 'BoundLogger') -> None:
        """
        The normalizer for the `RamanSpectrometerReference` class.

        Args:
            archive (EntryArchive): The archive containing the section that is being
            normalized.
            logger (BoundLogger): A structlog logger.
        """
        super().normalize(archive, logger)
# Forward declare AssemblyStep
# class AssemblyStep(FzGrowthStep, PlotSection, ArchiveSection): 
#     m_def = Section()
class FeedRodReference(CompositeSystemReference, ArchiveSection):
    m_def = Section(a_eln=dict(overview=True))
    reference = Quantity(
        type=Feed_rod,
        a_eln={'component': 'ReferenceEditQuantity'},
    )
    
class SeedMounted(CompositeSystemReference, ArchiveSection):
    m_def = Section(a_eln=dict(overview=True))
    reference = Quantity(
        type=Seed,
        a_eln={'component': 'ReferenceEditQuantity'},
    )
    seed_orientation = Quantity(
        type=str,
        description='seed orientation',
        a_eln={'component': 'StringEditQuantity'},
    )
    seed_batch = Quantity(
        type=str,
        description='seed batch',
        a_eln={'component': 'StringEditQuantity'},
    )
    def normalize(self, archive: 'EntryArchive', logger: 'BoundLogger') -> None:
        """
        The normalizer for the `AssemblyStep` class.

        Args:
            archive (EntryArchive): The archive containing the section that is being
            normalized.
            logger (BoundLogger): A structlog logger.
        """
        super().normalize(archive, logger)
        if self.reference:
            self.seed_orientation = self.reference.orientation
            self.seed_batch = self.reference.seed_batch
class FeedStockPreparation(FzGrowthStep, ArchiveSection):
    
    m_def = Section() #a_eln=dict(overview=True))
    
    feed_rod_reference =SubSection(
        section_def=FeedRodReference,
    )
    seed_rod_mounted = SubSection(
        section_def=SeedMounted,
    )

    # feed_rod_reference = Quantity(
    #     type=Feed_rod,
    #     a_eln={'component': 'ReferenceEditQuantity'},
    # )
    # seed_rod_mounted = Quantity(
    #     type=Seed,
    #     a_eln={'component': 'ReferenceEditQuantity'},
    # )
    # seed_orientation = Quantity(
    #     type=str,
    #     description='seed orientation',
    #     a_eln={'component': 'StringEditQuantity'},
    # )
    # seed_batch = Quantity(
    #     type=str,
    #     description='seed batch',
    #     a_eln={'component': 'StringEditQuantity'},
    #) 
    # def normalize(self, archive: 'EntryArchive', logger: 'BoundLogger') -> None:
    #     """
    #     The normalizer for the `AssemblyStep` class.

    #     Args:
    #         archive (EntryArchive): The archive containing the section that is being
    #         normalized.
    #         logger (BoundLogger): A structlog logger.
    #     """
    #     super().normalize(archive, logger)
    #     if self.seed_rod_mounted:
    #         self.seed_orientation = self.seed_rod_mounted.orientation
    #         self.seed_batch = self.seed_rod_mounted.seed_batch
class AssemblyStep(FzGrowthStep, PlotSection, ArchiveSection):
    m_def = Section(a_eln=dict(overview=True))
    name = Quantity(
        type=str,
        description=' ',
        a_eln={'component': 'StringEditQuantity'},
        default='Assembly',
    )
    
    based_on_process = Quantity(
        type=Reference(SectionProxy('FzGrowthProcess')),
        a_eln={'component': 'ReferenceEditQuantity'},
    )
    load_assembly = Quantity(
        type=bool,
        default=True,
        description='load the assembly',
        a_eln={'component': 'BoolEditQuantity'},
    )
    # assembly_name = Quantity(
    #     type=str,
    #     description='name of the assembly',
    #     a_eln={'component': 'StringEditQuantity'},
    # )
    assembly=SubSection(
        section_def=Assembly,
    )
    def normalize(self, archive: 'EntryArchive', logger: 'BoundLogger') -> None:
        """
        The normalizer for the `AssemblyStep` class.

        Args:
            archive (EntryArchive): The archive containing the section that is being
            normalized.
            logger (BoundLogger): A structlog logger.
        """
        super().normalize(archive, logger)
        if self.based_on_process and self.load_assembly:
            # for step in self.based_on_process.steps:
            #     if isinstance(step, AssemblyStep):
            #         self.assembly = step.assembly
            #         self.load_assembly = False
            if self.based_on_process.assembly_step.assembly:
                self.assembly = self.based_on_process.assembly_step.assembly
                self.load_assembly = False
        elif self.based_on_process is None and self.load_assembly:
            self.load_assembly = False    
        parts_type=[]
        part_ids=[]
        if self.assembly:
            
            for parts in self.assembly.rod_holder_parts:
                parts_type.append("rod holder part")
                part_ids.append(parts.lab_id)
            for parts in self.assembly.coil_parts:
                parts_type.append("coil part")
                part_ids.append(parts.lab_id)
            for parts in self.assembly.reflector_parts:
                parts_type.append("reflector part")
                part_ids.append(parts.lab_id)
            for parts in self.assembly.preheater_parts:      
                parts_type.append("preheater part")
                part_ids.append(parts.lab_id)
            for parts in self.assembly.afterheater_parts:
                parts_type.append("afterheater part")
                part_ids.append(parts.lab_id)
            for parts in self.assembly.seed_holder_parts:
                parts_type.append("seed holder part")
                part_ids.append(parts.lab_id)
            for parts in self.assembly.auxiliaries_parts:
                parts_type.append("auxiliaries part")
                part_ids.append(parts.lab_id)
        self.figures = []

        
       
                    
        fig = go.Figure(
            data=[
                go.Table(
                    header=dict(values=['Type', 'ID']),
                    cells=dict(values=[parts_type, part_ids])
                )
            ]
        )
        self.figures.append(PlotlyFigure(label='Table', figure=fig.to_plotly_json()))
        super().normalize(archive, logger)

# # Add AssemblyStep as a subsection to FzGrowthProcess
# FzGrowthProcess.m_def.sub_sections.append(
#     SubSection(
#         section_def=AssemblyStep,
        
#     )
# )
class FzGrowthProcess(Process, Schema): #EntryData, ArchiveSection):
    """
    Class autogenerated from yaml schema.
    """
    m_def = Section(
        categories=[IKZFZCategory],
        label='Fz Growth Process',
    )
    instruments = SubSection(
        section_def=FzInstrumentReference,
        repeats=True,
    )
    fz_furnace= Quantity(
        type=MEnum(["Fz 30" , "Fz 1505-1", "Fz 1505-2", "Fz 1520"]),
        description='Choose Fz furnace that was used for this process.',
        a_eln={'component': 'EnumEditQuantity'},
    )
    lab_id = Quantity(
        type=str,
        description='lab id of the process',
        a_eln={'component': 'StringEditQuantity',
               'label': 'Experiment No.'},
    )
    fzmaterials = SubSection(
        section_def=Fz_Materials,
        repeats=True,
    )
    assembly_step = SubSection(
        section_def=AssemblyStep,
        #repeats=True,
    )
    feed_stock_preparation = SubSection(
        section_def=FeedStockPreparation)
    steps = SubSection(
        section_def=FzGrowthStep,
        repeats=True,
    )

    def normalize(self, archive: 'EntryArchive', logger: 'BoundLogger') -> None:  # noqa: PLR0912
        """
        The normalizer for the `FzGrowthProcess` class.

        Args:
            archive (EntryArchive): The archive containing the section that is being
            normalized.
            logger (BoundLogger): A structlog logger.
        """
        super().normalize(archive, logger)
        if self.assembly_step is None:
            self.assembly_step = AssemblyStep()
        instruments=[]
        if self.fz_furnace:
            if self.fz_furnace == "Fz 30":
                furnace_reference=InstrumentReference(lab_id="IKZ_Fz_30")
            elif self.fz_furnace == "Fz 1505":
                furnace_reference=InstrumentReference(lab_id="IKZ_Fz_1505")
            elif self.fz_furnace == "Fz 1520":
                furnace_reference=InstrumentReference(lab_id="IKZ_Fz_1520")
            furnace_reference.normalize(archive, logger)
            instruments.append(furnace_reference)
        for step in self.steps:
            if isinstance(step, AssemblyStep):
                for part in step.assembly.rod_holder_parts:
                    instruments.append(part)                 
                for part in step.assembly.coil_parts:
                    instruments.append(part)
                for part in step.assembly.reflector_parts:
                    instruments.append(part)
                for part in step.assembly.preheater_parts:
                    instruments.append(part)
                for part in step.assembly.afterheater_parts:
                    instruments.append(part)
                for part in step.assembly.seed_holder_parts:
                    instruments.append(part)
                for part in step.assembly.auxiliaries_parts:
                    instruments.append(part)
        if self.assembly_step.assembly:
            for part in self.assembly_step.assembly.rod_holder_parts:
                instruments.append(part)                 
            for part in self.assembly_step.assembly.coil_parts:
                instruments.append(part)
            for part in self.assembly_step.assembly.reflector_parts:
                instruments.append(part)
            for part in self.assembly_step.assembly.preheater_parts:
                instruments.append(part)
            for part in self.assembly_step.assembly.afterheater_parts:
                instruments.append(part)
            for part in self.assembly_step.assembly.seed_holder_parts:
                instruments.append(part)
            for part in self.assembly_step.assembly.auxiliaries_parts:
                instruments.append(part)            
        self.instruments=instruments
        fzfeedstock=[]
        if self.feed_stock_preparation is None:
            self.feed_stock_preparation = FeedStockPreparation()
            self.feed_stock_preparation.feed_rod_reference = FeedRodReference()
            self.feed_stock_preparation.seed_rod_mounted = SeedMounted()

        if self.feed_stock_preparation:
            if (
                self.feed_stock_preparation.feed_rod_reference and 
                self.feed_stock_preparation.seed_rod_mounted
            ):
                fzfeedstock.append(self.feed_stock_preparation.feed_rod_reference)
                #elif self.feed_stock_preparation.seed_rod_mounted:
                fzfeedstock.append(self.feed_stock_preparation.seed_rod_mounted)  
            
        self.fzmaterials=fzfeedstock



m_package.__init_metainfo__()